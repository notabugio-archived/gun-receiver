!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("ramda"),require("uuid"),require("flat"),require("redis"),require("ws")):"function"==typeof define&&define.amd?define("gun-receiver",["ramda","uuid","flat","redis","ws"],n):"object"==typeof exports?exports["gun-receiver"]=n(require("ramda"),require("uuid"),require("flat"),require("redis"),require("ws")):e["gun-receiver"]=n(e.ramda,e.uuid,e.flat,e.redis,e.ws)}("undefined"!=typeof self?self:this,function(e,n,t,r,o){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=2)}([function(n,t){n.exports=e},function(e,t){e.exports=n},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"chainInterface",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(n,"preventConflicts",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(n,"Receiver",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(n,"deduplicateMessages",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(n,"allowLeech",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(n,"relayMessages",{enumerable:!0,get:function(){return a.default}}),n.websocketTransport=n.redisBackend=void 0;var r=d(t(3)),o=d(t(4)),u=d(t(5)),i=d(t(6)),c=d(t(7)),f=l(t(8)),a=d(t(11)),s=l(t(12));function l(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};r.get||r.set?Object.defineProperty(n,t,r):n[t]=e[t]}return n.default=e,n}function d(e){return e&&e.__esModule?e:{default:e}}var p=f;n.redisBackend=p;var v=s;n.websocketTransport=v},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(0);function o(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}n.default=function(e){return e.get=function(n){return function n(t){var u,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=function(n){var o,c,f=!1,a=n.bind(u),s=function(e){return(f=!0)&&a(o=e)},l={},d={},p=e.connected(function(e){var n=e.json;(0,r.keys)((0,r.prop)("put",n)).forEach(function(e){if(l[e]){var t=(0,r.path)(["put",e],n);t||f||s(),t&&(d[e]=t)}});var u=c(t);u!==o&&s(u)}),v=function(e){return l[e]?d[e]:(l[e]=!0,p.receive({...i,json:{get:{"#":e}},skipValidation:!0}),d[e])};return c=function(e){var n=e[e.length-1];if(1===e.length)return v(n);var o=c(e.slice(0,e.length-1));if(o){var u=(0,r.prop)(n,o);return u&&u["#"]?v(u["#"]):(e===t&&s(u),u)}},p.receive({json:{leech:!0}}),c(t),function(){return e.disconnected(p)}},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r.identity;return new Promise(function(e){var n=c(function(t){e(t),n()})}).then(e)};return u={get:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n([].concat(o(t),[e]),r)},on:c,then:f,once:function(e){return f(e.bind(u))&&u}}}([n],arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})},e},e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(0);n.default=function(e){return e.onIn(function(n){var t=n.json,o=[],u=(0,r.keys)((0,r.prop)("put",t));return u.length?Promise.all(u.map(function(n){var u=(0,r.path)(["put",n,"_",">"],t)||{};return e.get(n,{noRelay:!0}).then(function(e){var n=(0,r.path)(["_",">"],e)||{};(0,r.keys)(u).forEach(function(e){n[e]&&n[e]>u[e]||o.push(u[e])})})})).then(function(){return o.length||t.get?n:null}):Promise.resolve(n)}),e},e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){var e,n=[],t=i(c(),2),r=t[0],f=t[1],a=i(c(),2),s=a[0],l=a[1];return e={connections:n,connected:function(t){var r=function(e){var n,t=e.db,r=e.send,i={},c=!1;return n={send:function(e){return t.processOut({...e,to:n}).then(function(e){return e&&r(e)}).catch(function(n){c||console.error("PISTOL send err",JSON.stringify(e,null,2),e.json.put,n),c=!0})},receive:function(e){var r=e.json,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,["json"]),i=JSON.stringify(r,null,2);return t.processIn({...o,db:t,json:{...r,"#":r["#"]||u.default.v4()},from:n}).catch(function(e){return console.error("PISTOL receive err",e,i)})},get:function(e){return(0,o.path)(e,i)},set:function(e,n){return i=(0,o.assocPath)(e,n,i)}}}({db:e,send:t});return n.push(r),r},disconnected:function(e){var t=n.indexOf(e);-1!==t&&n.splice(t,1)},onIn:r,onOut:s,processIn:f,processOut:l}};var r,o=t(0),u=(r=t(1))&&r.__esModule?r:{default:r};function i(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],r=!0,o=!1,u=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,u=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw u}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(){var e=[];return[function(n){return e.push(n)},function(n){var t=e.slice().reverse();return function e(n){try{var r=t.pop();return n&&r?Promise.resolve(r(n)).then(e):Promise.resolve(n)}catch(e){return Promise.reject(e)}}(n)},function(n){return e=(0,o.without)([n],e)}]}e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(0),o=1e4;n.default=function(e){var n={};return e.onIn(function(e){var t=(0,r.path)(["json","#"],e);return!t||t in n?null:(n[t]=!0,function(){for(var e;(e=Object.keys(n)).length>o;)delete n[e[0]]}(),e)}),e},e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(0);function o(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}n.default=function(e){return e.onIn(function(e){if(!(0,r.path)(["json","leech"],e))return[(0,r.path)(["json","get","#"],e)].concat(o((0,r.keys)((0,r.path)(["json","put"],e)))).forEach(function(n){return n&&e.from.set(["hasAskedFor",n],!0)}),e;e.from.set(["isLeeching"],!0)}),e.onOut(function(e){var n=e.to,t=e.json,o=e.ignoreLeeching;return!n.get(["isLeeching"])||o?e:(0,r.keys)(t.put).filter(function(e){if(!n.get(["hasAskedFor",e]))return!1;var o=(0,r.path)([e,"_",">"],t.put),u=!1;return!(0,r.keys)(o).length||((0,r.keys)(o).forEach(function(t){var r=n.get(["knownDeltas",e,t])||0,i=parseFloat(o[t])||0;r&&i<=r||(n.set(["knownDeltas",e,t],i),u=!0)}),u)}).length?e:void 0}),e},e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.respondToGets=void 0;var r=t(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var u=t(1),i=t(9),c=1e5,f=function(e){if(!e)return e;var n=e._&&e._[">"]||{};return(0,r.keys)(n).forEach(function(t){var u=n[t];if("object"===o(u)){var i=(0,r.keys)(u),c=i[0];if(c){var f=[t,i].join("."),a=u[c];delete n[t],n[f]=a,a=e[t]&&e[t][c]||null,delete e[t],e[f]=a}}}),(0,r.keys)(e).forEach(function(e){e[0]}),e};n.respondToGets=function(e){var n=t(10).createClient(),o=function(e){return new Promise(function(t,r){return e?n.hgetall(e,function(e,n){if(e)console.error("get error",e),r(e);else{var o=function(e){if(!e)return e;var n={};return Object.keys(e).forEach(function(n){"."===n[0]&&delete e[n],"|NULL|"===e[n]&&(e[n]=null),"|UNDEFINED|"===e[n]&&(e[n]=void 0),/>\./.test(n)&&(e[n]=parseFloat(e[n],10)||e[n]),e[n]&&e[n].length>c&&(e[n]=e[n].slice(0,c),console.log("truncated",n))}),e=f(i.unflatten(e)),Object.keys(e).sort().forEach(function(t){return n[t]=e[t]}),n}(n);t(o)}}):t(null)})};return e.onIn(function(e){var n=e.from,t=e.json,i=(0,r.path)(["get","#"],t),c=(0,r.prop)("#",t);return i?o(i).then(function(t){var r,o,f,a={"#":u.v4(),"@":c,put:(r={},o=i,f=t||void 0,o in r?Object.defineProperty(r,o,{value:f,enumerable:!0,configurable:!0,writable:!0}):r[o]=f,r)};return n.send({json:a,ignoreLeeching:!0,skipValidation:!t}),t&&-1===i.indexOf("@~")?null:e}):e}),e}},function(e,n){e.exports=t},function(e,n){e.exports=r},function(e,n,t){"use strict";var r=t(0);e.exports=function(e){return e.onIn(function(n){var t=n.from,o=n.json;return n.noRelay?n:((0,r.without)([t],e.connections).forEach(function(e){return e.send({from:t,json:o,skipValidation:!0})}),n)}),e}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.server=void 0;var r=t(0),o=(0,r.curry)(function(e,n){var r=e.web,o=e.port;return new(t(13).Server)({port:r?void 0:o,server:r}).on("connection",function(e){var t=!0,r=!1,o=n.connected(function(n){n&&n.json&&t&&e.send(JSON.stringify(n.json),function(e){e&&!r&&(console.warn("ws send err",e),r=!0)})}),u=setInterval(function(){return o.send({json:{ping:!0},skipValidation:!0})},6e4);e.on("message",function e(n){try{var t=JSON.parse(n);Array.isArray(t)?t.forEach(e):o.receive({json:t})}catch(e){console.error("PISTOL invalid ws msg",e)}}),e.on("close",function(){t=!1,clearInterval(u),n.disconnected(o)})}),n});n.server=o},function(e,n){e.exports=o}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,