!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("uuid"),require("ws")):"function"==typeof define&&define.amd?define("gun-receiver",["ramda","uuid","ws"],t):"object"==typeof exports?exports["gun-receiver"]=t(require("ramda"),require("uuid"),require("ws")):e["gun-receiver"]=t(e.ramda,e.uuid,e.ws)}("undefined"!=typeof self?self:this,function(e,t,n){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(t,n){t.exports=e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"chainInterface",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"preventConflicts",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"Receiver",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"deduplicateMessages",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"allowLeech",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"relayMessages",{enumerable:!0,get:function(){return c.default}}),t.websocketTransport=void 0;var r=a(n(2)),o=a(n(3)),i=a(n(4)),u=a(n(6)),s=a(n(7)),c=a(n(8));function a(e){return e&&e.__esModule?e:{default:e}}var f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(9));t.websocketTransport=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(0);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}t.default=function(e){return e.get=function(t){return function t(n){var i,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=function(t){var o,s,c=!1,a=t.bind(i),f=function(e){return(c=!0)&&a(o=e)},l={},d={},p=e.connected(function(e){var t=e.json;(0,r.keys)((0,r.prop)("put",t)).forEach(function(e){if(l[e]){var n=(0,r.path)(["put",e],t);n||c||f(),n&&(d[e]=n)}});var i=s(n);i!==o&&f(i)}),h=function(e){return l[e]?d[e]:(l[e]=!0,p.receive({...u,json:{get:{"#":e}},skipValidation:!0}),d[e])};return s=function(e){var t=e[e.length-1];if(1===e.length)return h(t);var o=s(e.slice(0,e.length-1));if(o){var i=(0,r.prop)(t,o);return i&&i["#"]?h(i["#"]):(e===n&&f(i),i)}},p.receive({json:{leech:!0}}),s(n),function(){return e.disconnected(p)}},c=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r.identity;return new Promise(function(e){var t=s(function(n){e(n),t()})}).then(e)};return i={get:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t([].concat(o(n),[e]),r)},on:s,then:c,once:function(e){return c(e.bind(i))&&i}}}([t],arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})},e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(0);t.default=function(e){return e.onIn(function(t){var n=t.json,o=[],i=(0,r.keys)((0,r.prop)("put",n));return i.length?Promise.all(i.map(function(t){var i=(0,r.path)(["put",t,"_",">"],n)||{};return e.get(t,{noRelay:!0}).then(function(e){var t=(0,r.path)(["_",">"],e)||{};(0,r.keys)(i).forEach(function(e){t[e]&&t[e]>i[e]||o.push(i[e])})})})).then(function(){return o.length||n.get?t:null}):Promise.resolve(t)}),e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e,t=[],n=u(s(),2),r=n[0],c=n[1],a=u(s(),2),f=a[0],l=a[1];return e={connections:t,connected:function(n){var r=function(e){var t,n=e.db,r=e.send,u={},s=!1;return t={send:function(e){return n.processOut({...e,to:t}).then(function(e){return e&&r(e)}).catch(function(t){s||console.error("PISTOL send err",JSON.stringify(e,null,2),e.json.put,t),s=!0})},receive:function(e){var r=e.json,o=e.raw,u=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["json","raw"]),s=o||JSON.stringify(r,null,2);return n.processIn({...u,db:n,json:{...r,"#":r["#"]||i.default.v4()},from:t}).catch(function(e){return console.error("PISTOL receive err",e,s)})},get:function(e){return(0,o.path)(e,u)},set:function(e,t){return u=(0,o.assocPath)(e,t,u)},msgId:function(){return i.default.v4()}}}({db:e,send:n});return t.push(r),r},disconnected:function(e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)},onIn:r,onOut:f,processIn:c,processOut:l}};var r,o=n(0),i=(r=n(5))&&r.__esModule?r:{default:r};function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var u,s=e[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function s(){var e=[];return[function(t){return e.push(t)},function(t){var n=e.slice().reverse();return function e(t){try{var r=n.pop();return t&&r?Promise.resolve(r(t)).then(e):Promise.resolve(t)}catch(e){return Promise.reject(e)}}(t)},function(t){return e=(0,o.without)([t],e)}]}e.exports=t.default},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(0),o=5e4;t.default=function(e){var t={};return e.onIn(function(e){var n=(0,r.path)(["json","#"],e);return!n||n in t?null:(t[n]=!0,e)}),setInterval(function(){for(var e=(0,r.keys)(t).reverse();e.length>o;)delete t[e.pop()]},6e4),e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(0);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}t.default=function(e){return e.onIn(function(e){if(!(0,r.path)(["json","leech"],e))return[(0,r.path)(["json","get","#"],e)].concat(o((0,r.keys)((0,r.path)(["json","put"],e)))).forEach(function(t){return t&&e.from.set(["hasAskedFor",t],!0)}),e;e.from.set(["isLeeching"],!0)}),e.onOut(function(e){var t=e.to,n=e.json,o=e.ignoreLeeching;return!t.get(["isLeeching"])||o?e:(0,r.keys)(n.put).filter(function(e){if(!t.get(["hasAskedFor",e]))return!1;var o=(0,r.path)([e,"_",">"],n.put),i=!1;return!(0,r.keys)(o).length||((0,r.keys)(o).forEach(function(n){var r=t.get(["knownDeltas",e,n])||0,u=parseFloat(o[n])||0;r&&u<=r||(t.set(["knownDeltas",e,n],u),i=!0)}),i)}).length?e:void 0}),e},e.exports=t.default},function(e,t,n){"use strict";var r=n(0);e.exports=function(e){return e.onIn(function(t){var n=t.from,o=t.json;return t.noRelay?t:((0,r.without)([n],e.connections).forEach(function(e){return e.send({from:n,json:o,skipValidation:!0})}),t)}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.client=t.server=void 0;var r=n(0),o=u(n(10)),i=u(n(11));function u(e){return e&&e.__esModule?e:{default:e}}var s=(0,r.curry)(function(e,t){var n=!1,r=!0,o=e.connected(function(e){if(e&&(e.json||e.raw)&&r){var o=e.raw||JSON.stringify(e.json);t.send(o,function(e){e&&!n&&(console.warn("ws send err",e),n=!0)})}}),i=setInterval(function(){return o.send({json:{ping:!0},skipValidation:!0})},6e4);return t.addEventListener("close",function(){t.reconnect||(r=!1,clearInterval(i),e.disconnected(o))}),t.addEventListener("message",function e(t){try{var n=t.data||t,r=JSON.parse(n);Array.isArray(r)?r.forEach(e):o.receive({json:r,raw:n})}catch(e){console.error("RECEIVER invalid ws msg",e,t.data)}}),o}),c=(0,r.curry)(function(e,t){var n=e.web,r=e.port;return new o.default.Server({port:n?void 0:r,server:n}).on("connection",s(t)),t});t.server=c;var a=(0,r.curry)(function(e,t){var n=new i.default(e,[],{WebSocket:o.default});return n.addEventListener("open",function(){return s(t,n)}),t});t.client=a},function(e,t){e.exports=n},function(e,t,n){"use strict";n.r(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return function(e,t){this.target=t,this.type=e}}(),u=function(e){function t(t,n){var r=e.call(this,"error",n)||this;return r.message=t.message,r.error=t,r}return o(t,e),t}(i),s=function(e){function t(t,n,r){void 0===t&&(t=1e3),void 0===n&&(n="");var o=e.call(this,"close",r)||this;return o.wasClean=!0,o.code=t,o.reason=n,o}return o(t,e),t}(i),c=function(){if("undefined"!=typeof WebSocket)return WebSocket},a={maxReconnectionDelay:1e4,minReconnectionDelay:1e3+4e3*Math.random(),minUptime:5e3,reconnectionDelayGrowFactor:1.3,connectionTimeout:4e3,maxRetries:1/0,debug:!1},f=function(){function e(e,t,n){void 0===n&&(n={});var r=this;this._listeners={error:[],message:[],open:[],close:[]},this._retryCount=-1,this._shouldReconnect=!0,this._connectLock=!1,this._binaryType="blob",this._closeCalled=!1,this._messageQueue=[],this.onclose=void 0,this.onerror=void 0,this.onmessage=void 0,this.onopen=void 0,this._handleOpen=function(e){r._debug("open event");var t=r._options.minUptime,n=void 0===t?a.minUptime:t;clearTimeout(r._connectTimeout),r._uptimeTimeout=setTimeout(function(){return r._acceptOpen()},n),r._ws.binaryType=r._binaryType,r._messageQueue.forEach(function(e){return r._ws.send(e)}),r._messageQueue=[],r.onopen&&r.onopen(e),r._listeners.open.forEach(function(t){return r._callEventListener(e,t)})},this._handleMessage=function(e){r._debug("message event"),r.onmessage&&r.onmessage(e),r._listeners.message.forEach(function(t){return r._callEventListener(e,t)})},this._handleError=function(e){r._debug("error event",e.message),r._disconnect(void 0,"TIMEOUT"===e.message?"timeout":void 0),r.onerror&&r.onerror(e),r._debug("exec error listeners"),r._listeners.error.forEach(function(t){return r._callEventListener(e,t)}),r._connect()},this._handleClose=function(e){r._debug("close event"),r._clearTimeouts(),r._shouldReconnect&&r._connect(),r.onclose&&r.onclose(e),r._listeners.close.forEach(function(t){return r._callEventListener(e,t)})},this._url=e,this._protocols=t,this._options=n,this._connect()}return Object.defineProperty(e,"CONNECTING",{get:function(){return 0},enumerable:!0,configurable:!0}),Object.defineProperty(e,"OPEN",{get:function(){return 1},enumerable:!0,configurable:!0}),Object.defineProperty(e,"CLOSING",{get:function(){return 2},enumerable:!0,configurable:!0}),Object.defineProperty(e,"CLOSED",{get:function(){return 3},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CONNECTING",{get:function(){return e.CONNECTING},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"OPEN",{get:function(){return e.OPEN},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CLOSING",{get:function(){return e.CLOSING},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CLOSED",{get:function(){return e.CLOSED},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"binaryType",{get:function(){return this._ws?this._ws.binaryType:this._binaryType},set:function(e){this._binaryType=e,this._ws&&(this._ws.binaryType=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"retryCount",{get:function(){return Math.max(this._retryCount,0)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bufferedAmount",{get:function(){return this._messageQueue.reduce(function(e,t){return"string"==typeof t?e+=t.length:t instanceof Blob?e+=t.size:e+=t.byteLength,e},0)+(this._ws?this._ws.bufferedAmount:0)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extensions",{get:function(){return this._ws?this._ws.extensions:""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"protocol",{get:function(){return this._ws?this._ws.protocol:""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"readyState",{get:function(){return this._ws?this._ws.readyState:e.CONNECTING},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"url",{get:function(){return this._ws?this._ws.url:""},enumerable:!0,configurable:!0}),e.prototype.close=function(e,t){void 0===e&&(e=1e3),this._closeCalled=!0,this._shouldReconnect=!1,this._clearTimeouts(),this._ws?this._ws.readyState!==this.CLOSED?this._ws.close(e,t):this._debug("close: already closed"):this._debug("close enqueued: no ws instance")},e.prototype.reconnect=function(e,t){this._shouldReconnect=!0,this._closeCalled=!1,this._retryCount=-1,this._ws&&this._ws.readyState!==this.CLOSED?(this._disconnect(e,t),this._connect()):this._connect()},e.prototype.send=function(e){this._ws&&this._ws.readyState===this.OPEN?(this._debug("send",e),this._ws.send(e)):(this._debug("enqueue",e),this._messageQueue.push(e))},e.prototype.addEventListener=function(e,t){this._listeners[e]&&this._listeners[e].push(t)},e.prototype.removeEventListener=function(e,t){this._listeners[e]&&(this._listeners[e]=this._listeners[e].filter(function(e){return e!==t}))},e.prototype._debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._options.debug&&console.log.apply(console,["RWS>"].concat(e))},e.prototype._getNextDelay=function(){var e=this._options,t=e.reconnectionDelayGrowFactor,n=void 0===t?a.reconnectionDelayGrowFactor:t,r=e.minReconnectionDelay,o=void 0===r?a.minReconnectionDelay:r,i=e.maxReconnectionDelay,u=void 0===i?a.maxReconnectionDelay:i,s=o;return this._retryCount>0&&(s=o*Math.pow(n,this._retryCount-1))>u&&(s=u),this._debug("next delay",s),s},e.prototype._wait=function(){var e=this;return new Promise(function(t){setTimeout(t,e._getNextDelay())})},e.prototype._getNextUrl=function(e){if("string"==typeof e)return Promise.resolve(e);if("function"==typeof e){var t=e();if("string"==typeof t)return Promise.resolve(t);if(t.then)return t}throw Error("Invalid URL")},e.prototype._connect=function(){var e=this;if(!this._connectLock&&this._shouldReconnect){this._connectLock=!0;var t=this._options,n=t.maxRetries,r=void 0===n?a.maxRetries:n,o=t.connectionTimeout,i=void 0===o?a.connectionTimeout:o,u=t.WebSocket,s=void 0===u?c():u;if(this._retryCount>=r)this._debug("max retries reached",this._retryCount,">=",r);else{if(this._retryCount++,this._debug("connect",this._retryCount),this._removeListeners(),"function"!=typeof(f=s)||2!==f.CLOSING)throw Error("No valid WebSocket class provided");var f;this._wait().then(function(){return e._getNextUrl(e._url)}).then(function(t){e._closeCalled?e._connectLock=!1:(e._debug("connect",{url:t,protocols:e._protocols}),e._ws=e._protocols?new s(t,e._protocols):new s(t),e._ws.binaryType=e._binaryType,e._connectLock=!1,e._addListeners(),e._connectTimeout=setTimeout(function(){return e._handleTimeout()},i))})}}},e.prototype._handleTimeout=function(){this._debug("timeout event"),this._handleError(new u(Error("TIMEOUT"),this))},e.prototype._disconnect=function(e,t){if(void 0===e&&(e=1e3),this._clearTimeouts(),this._ws){this._removeListeners();try{this._ws.close(e,t),this._handleClose(new s(e,t,this))}catch(e){}}},e.prototype._acceptOpen=function(){this._debug("accept open"),this._retryCount=0},e.prototype._callEventListener=function(e,t){"handleEvent"in t?t.handleEvent(e):t(e)},e.prototype._removeListeners=function(){this._ws&&(this._debug("removeListeners"),this._ws.removeEventListener("open",this._handleOpen),this._ws.removeEventListener("close",this._handleClose),this._ws.removeEventListener("message",this._handleMessage),this._ws.removeEventListener("error",this._handleError))},e.prototype._addListeners=function(){this._ws&&(this._debug("addListeners"),this._ws.addEventListener("open",this._handleOpen),this._ws.addEventListener("close",this._handleClose),this._ws.addEventListener("message",this._handleMessage),this._ws.addEventListener("error",this._handleError))},e.prototype._clearTimeouts=function(){clearTimeout(this._connectTimeout),clearTimeout(this._uptimeTimeout)},e}();t.default=f}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,